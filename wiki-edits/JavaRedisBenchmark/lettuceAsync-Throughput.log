# JMH version: 1.21
# VM version: JDK 1.8.0_221, Java HotSpot(TM) 64-Bit Server VM, 25.221-b11
# VM invoker: C:\kevin\Java\jdk1.8.0_221\jre\bin\java.exe
# VM options: <none>
# Warmup: 2 iterations, 10 s each
# Measurement: 5 iterations, 600 ms each
# Timeout: 10 min per iteration
# Threads: 100 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: benchmark.LettuceBenchmark.get

# Run progress: 0.00% complete, ETA 00:00:46
# Fork: 1 of 1
# Warmup Iteration   1: 37.353 ops/ms
# Warmup Iteration   2: 44.096 ops/ms
Iteration   1: 48.329 ops/ms
Iteration   2: 32.711 ops/ms
Iteration   3: 36.886 ops/ms
Iteration   4: 42.717 ops/ms
Iteration   5: 51.795 ops/ms


Result "benchmark.LettuceBenchmark.get":
  42.488 ¡À(99.9%) 30.305 ops/ms [Average]
  (min, avg, max) = (32.711, 42.488, 51.795), stdev = 7.870
  CI (99.9%): [12.182, 72.793] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_221, Java HotSpot(TM) 64-Bit Server VM, 25.221-b11
# VM invoker: C:\kevin\Java\jdk1.8.0_221\jre\bin\java.exe
# VM options: <none>
# Warmup: 2 iterations, 10 s each
# Measurement: 5 iterations, 600 ms each
# Timeout: 10 min per iteration
# Threads: 100 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: benchmark.LettuceBenchmark.set

# Run progress: 50.00% complete, ETA 00:00:26
# Fork: 1 of 1
# Warmup Iteration   1: 5.244 ops/ms
# Warmup Iteration   2: 6.267 ops/ms
Iteration   1: 5.976 ops/ms
Iteration   2: 6.471 ops/ms
Iteration   3: 6.597 ops/ms
Iteration   4: 6.596 ops/ms
Iteration   5: 6.333 ops/ms


Result "benchmark.LettuceBenchmark.set":
  6.394 ¡À(99.9%) 0.993 ops/ms [Average]
  (min, avg, max) = (5.976, 6.394, 6.597), stdev = 0.258
  CI (99.9%): [5.401, 7.388] (assumes normal distribution)


# Run complete. Total time: 00:00:53

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark              Mode  Cnt   Score    Error   Units
LettuceBenchmark.get  thrpt    5  42.488 ¡À 30.305  ops/ms
LettuceBenchmark.set  thrpt    5   6.394 ¡À  0.993  ops/ms
